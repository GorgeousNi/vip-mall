<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">


<generatorConfiguration>
  <!--导入属性配置 -->
  <properties resource="generator.properties"></properties>

  <!--指定特定数据库的jdbc驱动jar包的位置 -->
  <classPathEntry location="${jdbc.driverLocation}"/>

  <context id="default" targetRuntime="MyBatis3">

    <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
   一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
-->
    <property name="autoDelimitKeywords" value="false"/>
    <!-- 生成的Java文件的编码 -->
    <property name="javaFileEncoding" value="UTF-8"/>
    <!-- 格式化java代码 -->
    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
    <!-- 格式化XML代码 -->
    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
    <property name="beginningDelimiter" value="''"/>
    <property name="endingDelimiter" value="''"/>

    <commentGenerator>
      <!-- optional，旨在创建class时，对注释进行控制 -->
      <property name="suppressDate" value="true"/>
      <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
      <property name="suppressAllComments" value="true"/>
    </commentGenerator>


    <!--jdbc的数据库连接 -->
    <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}"
      userId="${jdbc.userId}" password="${jdbc.password}">
    </jdbcConnection>


    <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
    <!-- java类型处理器
    用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
    注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
-->
    <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
      <!--
          true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
          false：默认,
              scale>0;length>18：使用BigDecimal;
              scale=0;length[10,18]：使用Long；
              scale=0;length[5,9]：使用Integer；true
              scale=0;length<5：使用Short；
       -->
      <property name="forceBigDecimals" value="true"/>
    </javaTypeResolver>

    <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
        targetPackage     指定生成的model生成所在的包名
        targetProject     指定在该项目下所在的路径
    -->
    <javaModelGenerator targetPackage="com.vip.sms.model" targetProject="src/main/java">
      <!--  for MyBatis3/MyBatis3Simple
          自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；
       -->
      <property name="constructorBased" value="false"/>

      <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
      <property name="enableSubPackages" value="true"/>

      <!-- for MyBatis3 / MyBatis3Simple
          是否创建一个不可变的类，如果为true，
          那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类
       -->
      <property name="immutable" value="false"/>

      <!-- 给Model添加一个父类 -->
      <!--<property name="rootClass" value="com.vip.model.base.BaseModel"/>-->

      <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
      <property name="trimStrings" value="true"/>
    </javaModelGenerator>


    <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
    <sqlMapGenerator targetPackage="com.vip.sms.dao" targetProject="src/main/java">
      <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
      <property name="enableSubPackages" value="true"/>
    </sqlMapGenerator>


    <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
    -->
    <javaClientGenerator targetPackage="com.vip.sms.dao" targetProject="src/main/java"
      type="XMLMAPPER">
      <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
      <property name="enableSubPackages" value="true"/>
      <!--
              定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有：
              public;
              private;
              protected;
              default
              注意：如果 targetRuntime="MyBatis3",此参数被忽略
       -->
      <!--<property name="exampleMethodVisibility" value=""/>-->
      <!--
                                     方法名计数器
        Important note: this property is ignored if the target runtime is MyBatis3.
       -->
      <!--<property name="methodNameCalculator" value=""/>-->

      <!--
                                          为生成的接口添加父接口
       -->
      <!--<property name="rootInterface" value=""/>-->

    </javaClientGenerator>


    <!--schema为数据库名, tableName为对应的数据库表, domainObjectName是要生成的实体类, -->
    <table tableName="platform_sms_info"
      enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"
      enableSelectByExample="false" selectByExampleQueryId="false">
      <!--<property name="useActualColumnNames" value="true"/>-->

    </table>


    <!-- optional   , only for mybatis3 runtime
         自动生成的键值（identity,或者序列值）
       如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中
       sqlStatement 的语句将会返回新的值
       如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:
          Cloudscape 	This will translate to: VALUES IDENTITY_VAL_LOCAL()
          DB2: 		VALUES IDENTITY_VAL_LOCAL()
          DB2_MF:		SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
          Derby: 		VALUES IDENTITY_VAL_LOCAL()
          HSQLDB: 	CALL IDENTITY()
          Informix: 	select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
          MySql: 		SELECT LAST_INSERT_ID()
          SqlServer: 	SELECT SCOPE_IDENTITY()
          SYBASE: 	SELECT @@IDENTITY
          JDBC:		This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.
          identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey> element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before the insert (typically for a sequence).

    -->
    <!--<generatedKey column="DB2" sqlStatement="VALUES IDENTITY_VAL_LOCAL()" identity="" type=""/>-->


    <!-- optional.
            列的命名规则：
            MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，
            作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤
            支持正在表达式
             searchString 表示要被换掉的字符串
             replaceString 则是要换成的字符串，默认情况下为空字符串，可选
    -->
    <!--<columnRenamingRule searchString="" replaceString=""/>-->


    <!-- optional.告诉 MBG 忽略某一列
            column，需要忽略的列
            delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配
            是否限定表的列名，即固定表列在Model中的名称
    -->
    <!--<ignoreColumn column=""  delimitedColumnName="" />-->


    <!--optional.覆盖MBG对Model 的生成规则
         column: 数据库的列名
         javaType: 对应的Java数据类型的完全限定名
         在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd" database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).
         jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).
         typeHandler:

    -->
    <!--<columnOverride column="" javaType=""	jdbcType=""	typeHandler=""	delimitedColumnName="" />-->

  </context>
</generatorConfiguration>